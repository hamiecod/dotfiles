var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// src/index.ts
__markAsModule(exports);
__export(exports, {
  activate: () => activate
});
var import_coc2 = __toModule(require("coc.nvim"));

// src/marketplace.ts
var import_coc = __toModule(require("coc.nvim"));
var Marketplace = class extends import_coc.BasicList {
  constructor(nvim) {
    super(nvim);
    this.name = "marketplace";
    this.description = "coc.nvim extensions marketplace";
    this.detail = "display all coc.nvim extensions in list, with an install action";
    this.defaultAction = "install";
    this.npmsio = import_coc.workspace.getConfiguration("marketplace").get("npmsio", false);
    this.installed = [];
    this.addAction("install", async (item) => {
      await nvim.command(`CocInstall ${item.data.name}`);
    });
    this.addAction("uninstall", async (item) => {
      if (!item.data.installed) {
        return;
      }
      await nvim.command(`CocUninstall ${item.data.name}`);
    });
    this.addAction("homepage", async (item) => {
      if (item.data.homepage) {
        import_coc.commands.executeCommand("vscode.open", item.data.homepage).catch(() => {
        });
      }
    });
  }
  async loadItems(context) {
    this.installed = await import_coc.extensions.getExtensionStates();
    const {args} = context;
    let query = "";
    if (args && args.length > 0) {
      for (const arg of args) {
        if (arg.startsWith("--")) {
          continue;
        }
        query = arg;
      }
    }
    const items = [];
    const exts = await this.fetchExtensions();
    for (const ext of exts) {
      if (query && query.length > 0) {
        if (ext.name.indexOf(query) < 0) {
          continue;
        }
      }
      items.push({
        label: ext.label,
        data: {
          installed: ext.installed,
          homepage: ext.homepage,
          name: ext.name
        }
      });
    }
    items.sort((a, b) => {
      return b.label.localeCompare(a.label);
    });
    return items;
  }
  async fetchExtensions() {
    const statusItem = import_coc.window.createStatusBarItem(0, {progress: true});
    statusItem.text = "Loading...";
    statusItem.show();
    let base = "https://registry.npmjs.com/-/v1/search?text=keywords:coc.nvim";
    if (this.npmsio) {
      base = "https://api.npms.io/v2/search?q=keywords:coc.nvim";
    }
    let exts = [];
    const size = 200;
    let page = 0;
    while (true) {
      try {
        const uri = `${base}&size=${size}&from=${size * page}`;
        const resp = await (0, import_coc.fetch)(uri);
        const body = typeof resp === "string" ? JSON.parse(resp) : resp;
        exts = exts.concat(this.format(body));
        if (page === Math.floor(body.total / size)) {
          break;
        }
        page += 1;
      } catch (_e) {
        break;
      }
    }
    statusItem.hide();
    return Promise.resolve(exts);
  }
  format(body) {
    const exts = [];
    let results = body.objects;
    if (this.npmsio) {
      results = body.results;
    }
    for (const item of results) {
      const pkg = item.package;
      if (pkg.name === "coc.nvim" || pkg.name === "coc-marketplace") {
        continue;
      }
      let sign = "";
      if (pkg.publisher.username === "chemzqm" || pkg.publisher.email === "chemzqm@gmail.com") {
        sign = "*";
      }
      let rtp = "";
      let status = "\xD7";
      let isInstalled = false;
      for (const e of this.installed) {
        if (e.id === pkg.name) {
          status = "\u221A";
          isInstalled = true;
          rtp = e.isLocal ? " [RTP]" : "";
          break;
        }
      }
      exts.push({
        name: pkg.name,
        label: `[${status}] ${pkg.name}${sign} ${pkg.version}${rtp}`.padEnd(40) + pkg.description,
        homepage: pkg.links.homepage ? pkg.links.homepage : pkg.links.npm,
        installed: isInstalled
      });
    }
    return exts;
  }
  doHighlight() {
    const {nvim} = this;
    nvim.pauseNotification();
    nvim.command("syntax match CocMarketplaceExtName /\\v%5v\\S+/", true);
    nvim.command("syntax match CocMarketplaceExtStatus /\\v^\\[[\u221A\xD7\\*]\\]/", true);
    nvim.command("syntax match CocMarketplaceExtVersion /\\v\\d+(\\.\\d+)*/", true);
    nvim.command("syntax match CocMarketplaceExtDescription /\\v%40v.*$/", true);
    nvim.command("highlight default link CocMarketplaceExtName String", true);
    nvim.command("highlight default link CocMarketplaceExtStatus Type", true);
    nvim.command("highlight default link CocMarketplaceExtVersion Tag", true);
    nvim.command("highlight default link CocMarketplaceExtDescription Comment", true);
    nvim.resumeNotification().catch(() => {
    });
  }
};
var marketplace_default = Marketplace;

// src/index.ts
async function activate(context) {
  const {subscriptions} = context;
  const {nvim} = import_coc2.workspace;
  subscriptions.push(import_coc2.listManager.registerList(new marketplace_default(nvim)));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  activate
});
